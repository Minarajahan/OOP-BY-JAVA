class student {
    private int roll;
    private int age;
    private int grade;
    student() {
        System.out.println("I am the default constructor");
    }

    student(int a) {
        roll = 1;
        age = 25;
        grade = a;
        System.out.println("I am a parameterized constructor with one INT type");
        System.out.println("Roll No: " + roll);
        System.out.println("Age: " + age);
        System.out.println("Grade: " + grade);
    }
    student(int a, int b) {
        roll = a;
        grade = b;
        System.out.println("I am a parameterized constructor with two INT types");
        System.out.println("Roll No: " + roll);
        System.out.println("Grade: " + grade);
    }

    void setAge(int a) {
        age = a;
        System.out.println("Age: " + age);
    }
    void setGrade(int g) {
        grade = g;
        System.out.println("Grade: " + grade);
    }
    public static void main(String[] args) {
        student s1 = new student();
        s1.setAge(34);
        s1.setGrade(3);
        student s2 = new student(12);
        s2.setAge(45);
        student s3 = new student(12, 25);
        s3.setAge(65);
    }
}




public class Main {
    public static void main(String[] args) {
        class BankAccount {
            private String name;
            private double balance;

            public String getName() {
                return name;
            }

            public void setName(String name) {
                if (name != null && !name.trim().isEmpty()) {
                    this.name = name;
                } else {
                    System.out.println("Name cannot be empty.");
                }
            }

            public double getBalance() {
                return balance;
            }

            public void deposit(double amount) {
                if (amount > 0) {
                    balance += amount;
                } else {
                    System.out.println("Deposit amount must be positive.");
                }
            }

            public void withdraw(double amount) {
                if (amount > 0 && amount <= balance) {
                    balance -= amount;
                } else {
                    System.out.println("Invalid withdrawal amount.");
                }
            }
        }

        BankAccount account = new BankAccount();
        account.setName("Jahan Minara");
        account.deposit(100000);
        account.withdraw(20000);
        System.out.println("Current balance: " + account.getBalance());
    }
}











public class Main {
    public static void main(String[] args) {
        class Book {
            private String title;
            private String author;
            private boolean borrowed;

            public String getTitle() {
                return title;
            }

            public void setTitle(String title) {
                if (title != null && !title.trim().isEmpty()) {
                    this.title = title;
                } else {
                    System.out.println("Title cannot be empty");
                }
            }

            public String getAuthor() {
                return author;
            }

            public void setAuthor(String author) {
                if (author != null && !author.trim().isEmpty()) {
                    this.author = author;
                } else {
                    System.out.println("Author cannot be empty.");
                }
            }

            public void borrow() {
                if (!borrowed) {
                    borrowed = true;
                    System.out.println("You have borrowed the book: " + title);
                } else {
                    System.out.println("This book is already borrowed");
                }
            }

            public void returnBook() {
                if (borrowed) {
                    borrowed = false;
                    System.out.println("You have returned the book: " + title);
                } else {
                    System.out.println("This book was not borrowed");
                }
            }
        }

        // Testing the Book class
        Book book = new Book();
        book.setTitle("Programming");
        book.setAuthor("John Doe");
        book.borrow();
        book.borrow();
        book.returnBook();   
    }
}








